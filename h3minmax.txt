#include <stdio.h>
#include <stdlib.h>
#include <omp.h>

void parallel_min_max(int* data, int size, int* min_val_ptr, int* max_val_ptr) {
    int local_min = data[0];
    int local_max = data[0];

    #pragma omp parallel for reduction(min:local_min) reduction(max:local_max)
    for (int i = 0; i < size; i++) {
        if (data[i] < local_min)
            local_min = data[i];
        if (data[i] > local_max)
            local_max = data[i];
    }

    *min_val_ptr = local_min;
    *max_val_ptr = local_max;
}

int main() {
    int data[] = {5, 2, 9, 1, 7, 6, 8, 3, 4};
    int size = sizeof(data) / sizeof(data[0]);

    int min_val, max_val;
    parallel_min_max(data, size, &min_val, &max_val);

    printf("Minimum value: %d\n", min_val);
    printf("Maximum value: %d\n", max_val);

    return 0;
}



















//with user ip
#include <iostream>
#include <vector>
#include <omp.h>
#include <climits>
using namespace std;

int main() {
    int n;
    cout << "Enter number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " integers: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    int min_val = INT_MAX;
    int max_val = INT_MIN;

    #pragma omp parallel for reduction(min: min_val) reduction(max: max_val)
    for (int i = 0; i < n; i++) {
        if (arr[i] < min_val)
            min_val = arr[i];
        if (arr[i] > max_val)
            max_val = arr[i];
    }

    cout << "Minimum value: " << min_val << endl;
    cout << "Maximum value: " << max_val << endl;

    return 0;
}
